@using Microsoft.AspNetCore.Mvc.Localization
@using NasladdinPlace.Core.Enums
@using NasladdinPlace.UI.ViewModels.PosOperationTransaction
@using NasladdinPlace.UI.ViewModels.Fiscalization
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using NasladdinPlace.UI.Helpers
@using NasladdinPlace.CheckOnline.Builders.CheckOnline.Enums
@using NasladdinPlace.Utilities.EnumHelpers
@inject IViewLocalizer Localizer
@model PosOperationTransactionDetailsViewModel

@{
    ViewData["Title"] = Localizer["PosOperationTransactionDetails"].Value;
}

@{
    var fiscalizationFormRenderer = new FormRendererHelper<FiscalizationInfoViewModel>();

    var requestDateTimeDisplayName = fiscalizationFormRenderer.Get(f => f.RequestDateTime).DisplayName;
    var responseDateTimeDisplayName = fiscalizationFormRenderer.Get(f => f.ResponseDateTime).DisplayName;
    var requestIdDisplayName = fiscalizationFormRenderer.Get(f => f.RequestId).DisplayName;
    var documentInfoDisplayName = fiscalizationFormRenderer.Get(f => f.DocumentInfo).DisplayName;
    var fiscalizationNumber = fiscalizationFormRenderer.Get(f => f.FiscalizationNumber).DisplayName;
    var fiscalizationSerial = fiscalizationFormRenderer.Get(f => f.FiscalizationSerial).DisplayName;
    var fiscalizationSign = fiscalizationFormRenderer.Get(f => f.FiscalizationSign).DisplayName;
    var correctionAmountDisplayName = fiscalizationFormRenderer.Get(f => f.CorrectionAmount).DisplayName;
    var errorInfoDisplayName = fiscalizationFormRenderer.Get(f => f.ErrorInfo).DisplayName;

    var posOperationTransactionFormRenderer = new FormRendererHelper<PosOperationTransactionViewModel>();

    var createdDateTimeDisplayName = posOperationTransactionFormRenderer.Get(f => f.CreatedDate).DisplayName;
    var transationStateDisplayName = posOperationTransactionFormRenderer.Get(f => f.Status).DisplayName;
    var transactionTypeDisplayName = posOperationTransactionFormRenderer.Get(f => f.Type).DisplayName;
    var bonusAmountDisplayName = posOperationTransactionFormRenderer.Get(f => f.BonusAmount).DisplayName;
    var moneyAmountDisplayName = posOperationTransactionFormRenderer.Get(f => f.MoneyAmount).DisplayName;
    var fiscalizationAmountDisplayName = posOperationTransactionFormRenderer.Get(f => f.FiscalizationAmount).DisplayName;
    var fiscalizationPaidDateDisplayName = posOperationTransactionFormRenderer.Get(f => f.FiscalizationPaidDate).DisplayName;
    var bankTransactionPaidDateDisplayName = posOperationTransactionFormRenderer.Get(f => f.BankTransactionPaidDate).DisplayName;
}

@await Html.PartialAsync("_bankTransactionsPartial")
@await Html.PartialAsync("_fiscalizationChecksPartial")

<div class="row row-eq-height wrapper border-bottom white-bg p-xs">
    <div class="col-xs-7 col-sm-10" style="font-size: 14px;">
        <ol class="breadcrumb" style="padding-top:5px;">
            <li class="hidden-xs">
                <a href="@Url.Action("All", "PointsOfSale")">@Localizer["Home"].Value</a>
            </li>
            <li class="hidden-xs">
                <a href="@Url.Action("GetChecks","GoodsMoving")">@Localizer["GoodsMoving"]</a>
            </li>
            <li class="hidden-xs">
                <a href="@Url.Action("Details", "GoodsMoving", new {operationId = Model.PosOperationId})">@Localizer["CheckEditing"].Value</a>
            </li>
            <li class="active">
                <strong>@Localizer["PosOperationTransactionDetails"]</strong>
            </li>
        </ol>
    </div>
</div>


<div class="wrapper wrapper-content animated fadeIn">

    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@Localizer["CommonInformaiton"].Value</h5>
        </div>
        <div class="ibox-content">
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover" style="margin-bottom: 0px;" role="grid">
                    <caption>&nbsp;</caption>
                    <thead role="rowgroup">
                        <tr role="row">
                            <th role="columnheader" id="createdDateTimeDisplayName" class="text-left">@createdDateTimeDisplayName</th>
                            <th role="columnheader" id="transactionTypeDisplayName" class="text-left">@transactionTypeDisplayName</th>
                            <th role="columnheader" id="transationStateDisplayName" class="text-left">@transationStateDisplayName</th>
                            <th role="columnheader" id="bonusAmountDisplayName" class="text-left">@bonusAmountDisplayName</th>
                            <th role="columnheader" id="moneyAmountDisplayName" class="text-left">@moneyAmountDisplayName</th>
                            <th role="columnheader" id="bankTransactionPaidDateDisplayName" class="text-left">@bankTransactionPaidDateDisplayName</th>
                            <th role="columnheader" id="fiscalizationAmountDisplayName" class="text-left">@fiscalizationAmountDisplayName</th>
                            <th role="columnheader" id="fiscalizationPaidDateDisplayName" class="text-left">@fiscalizationPaidDateDisplayName</th>
                        </tr>
                    </thead>
                    <tbody role="rowgroup">
                        <tr role="row">
                            <td role="gridcell"><span data-bind="date:createdDate, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span></td>
                            <td role="gridcell"><span data-bind="text: $root.GetPotTypeName(type)"></span></td>
                            <td role="gridcell"><span data-bind="text: $root.GetPotStateName(status)"></span></td>
                            <td role="gridcell"><span data-bind="text: bonusAmount"></span></td>
                            <td role="gridcell"><span data-bind="text: moneyAmount"></span></td>
                            <td role="gridcell"><span data-bind="date: bankTransactionPaidDate, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span></td>
                            <td role="gridcell"><span data-bind="text: fiscalizationAmount"></span></td>
                            <td role="gridcell"><span data-bind="date: fiscalizationPaidDate, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="transaction-details">
        <div data-bind="template: { name: 'bankTransactions-template', data: bankTransactionInfos }"></div>

        <div data-bind="template: { name: 'fiscalizationInfos-template', data: fiscalizationInfos }"></div>
    </div>
        
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@Localizer["Fiscalization"].Value</h5>
        </div>
        <div class="ibox-content" data-bind="with: $root.lastFiscalizationInfo">
            <div class="panel"  data-bind="css: {'panel-danger':  state === @((int) FiscalizationState.PendingError) || state === @((int) FiscalizationState.Error),
                                'panel-success':  state === @((int) FiscalizationState.Success),
                                'panel-warning':  state === @((int) FiscalizationState.Pending) || state === @((int) FiscalizationState.InProcess)}">
                <div class="panel-heading" data-bind="text: $root.GetTitle(type, state)"></div>
                <div class="panel-body">
                    <div data-bind="visible: state === @((int) FiscalizationState.PendingError) || state === @((int) FiscalizationState.Error)">
                        <div class="form-group row">
                            <label class="col-lg-12">@requestDateTimeDisplayName</label>
                            <div class="col-lg-12">
                                <span data-bind="date:requestDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@errorInfoDisplayName</label>
                            <div class="col-lg-12">
                                <span data-bind="text:errorInfo"></span>
                            </div>
                        </div>
                    </div>

                    <div data-bind="visible: state === @((int) FiscalizationState.Pending) || state === @((int) FiscalizationState.InProcess)">
                        <div class="form-group row">
                            <label class="col-lg-12">@requestDateTimeDisplayName</label>
                            <div class="col-lg-12">
                                <span data-bind="date:requestDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@requestIdDisplayName</label>
                            <div class="col-lg-12">
                                <span data-bind="text:requestId"></span>
                            </div>
                        </div>
                    </div>

                    <div data-bind="visible: state === @((int) FiscalizationState.Success) && (type === @((int) FiscalizationType.Income)
                                                                                    || type === @((int) FiscalizationType.IncomeRefund) )">
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="form-group row" id="qr-code-image">
                                    <div id="fiscalization-qr-code" style="width: 80%; margin: 0 auto 0 auto;"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="form-group row">
                                    <label class="col-lg-12">@documentInfoDisplayName</label>
                                    <div class="col-lg-12">
                                        <span class="custom-check" data-bind="html: documentInfo != null ? documentInfo.replaceAll('\n', '<br/>') : ''"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">

                                <div class="form-group row">
                                    <label class="col-lg-12">@requestDateTimeDisplayName</label>
                                    <div class="col-lg-12">
                                        <span data-bind="date:requestDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-lg-12">@responseDateTimeDisplayName</label>
                                    <div class="col-lg-12">
                                        <span data-bind="date:responseDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-lg-12">@fiscalizationNumber</label>
                                    <div class="col-lg-12">
                                        <span data-bind="text: fiscalizationNumber"></span>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-lg-12">@fiscalizationSerial</label>
                                    <div class="col-lg-12">
                                        <span data-bind="text: fiscalizationSerial"></span>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-lg-12">@fiscalizationSign</label>
                                    <div class="col-lg-12">
                                        <span data-bind="text: fiscalizationSign"></span>
                                    </div>
                                </div>
                                                
                            </div>
                        </div>
                    </div>

                    <div data-bind="visible: state === @((int) FiscalizationState.Success) && type === @((int) FiscalizationType.Correction)">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group row">
                                    <label class="col-lg-12">@requestDateTimeDisplayName</label>
                                    <div class="col-lg-12">
                                        <span data-bind="date:requestDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group row">
                                    <label class="col-lg-12">@responseDateTimeDisplayName</label>
                                    <div class="col-lg-12">
                                        <span data-bind="date:responseDateTime, dateFormat: 'DD.MM.YYYY HH:mm:ss'"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@correctionAmountDisplayName</label>
                            <div class="col-lg-12">
                                <span data-bind="numeric: correctionAmount, decimalPlaces: 2"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@documentInfoDisplayName</label>
                            <div class="col-lg-12">
                                <span class="custom-check" data-bind="html: documentInfo != null ? documentInfo.replaceAll('\n', '<br/>') : ''"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@fiscalizationNumber</label>
                            <div class="col-lg-12">
                                <span data-bind="text: fiscalizationNumber"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-lg-12">@fiscalizationSerial</label>
                            <div class="col-lg-12">
                                <span data-bind="text: fiscalizationSerial"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script type="text/javascript">
        @{
            var serializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver(),
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };
        }

        var posOperationTransaction = @Html.Raw(JsonConvert.SerializeObject(Model, serializerSettings));
        var transactionDetailsViewModel = new TransacitonDetailsViewModel(posOperationTransaction);
        ko.applyBindings(transactionDetailsViewModel, document.getElementById("#transaction-details"));
     
        FiscalizationQrCodeRenderer.render("fiscalization-qr-code", posOperationTransaction.lastFiscalizationInfo);

        function TransacitonDetailsViewModel(posOperationTransaction) {
            var self = this;

            $.extend(self, posOperationTransaction);

            var fiscalizationChecksHandler = (window.getFiscalizationChecksHandler
                ? window.getFiscalizationChecksHandler()
                : new FiscalizationChecksHandler()
            );


            fiscalizationChecksHandler.initViewModel(self);


            self.GetPosOperationTransactionViewTitle = function (type, status) {
                return vm.GetPotTypeName(type) + ' ' + self.GetPotStateName(status).toLowerCase();
            };

            self.GetPotTypeName = function (type) {
                if (type === @((int) PosOperationTransactionType.RegularPurchase))
                    return '@Html.Raw(@Localizer[nameof(PosOperationTransactionType.RegularPurchase)].Value)';
                if (type === @((int)PosOperationTransactionType.Refund))
                    return '@Html.Raw(@Localizer[nameof(PosOperationTransactionType.Refund)].Value)';
                if (type === @((int)PosOperationTransactionType.Addition))
                    return '@Html.Raw(@Localizer[nameof(PosOperationTransactionType.Addition)].Value)';
                if (type === @((int)PosOperationTransactionType.Verification))
                    return '@Html.Raw(@Localizer[nameof(PosOperationTransactionType.Verification)].Value)';

                return '';
            };

            self.GetPotStateName = function (status) {
                if (status === @((int) PosOperationTransactionStatus.InProcess))
                    return '@Html.Raw(PosOperationTransactionStatus.InProcess.GetDisplayName())';
                if (status === @((int)PosOperationTransactionStatus.PaidFiscalized))
                    return '@Html.Raw(PosOperationTransactionStatus.PaidFiscalized.GetDisplayName())';
                if (status === @((int)PosOperationTransactionStatus.Unpaid))
                    return '@Html.Raw(PosOperationTransactionStatus.Unpaid.GetDisplayName())';
                if (status === @((int)PosOperationTransactionStatus.PaidUnfiscalized))
                    return '@Html.Raw(PosOperationTransactionStatus.PaidUnfiscalized.GetDisplayName())';

                return '';
            };
        }

        function FiscalizationChecksHandler(initViewModel, onSelectTextReferencValue) {
            return {
                initViewModel: initViewModel || function(vm) {},
                onSelectTextReferencValue: onSelectTextReferencValue || function(vm, data, property, propertyName) {}
            };
        }

    </script>
}
