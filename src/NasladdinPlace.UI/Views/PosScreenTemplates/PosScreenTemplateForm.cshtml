@using Microsoft.AspNetCore.Mvc.Localization
@using NasladdinPlace.UI.Helpers
@using NasladdinPlace.UI.Managers.Reference.Enums
@using NasladdinPlace.UI.ViewModels.PointsOfSale
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model NasladdinPlace.UI.ViewModels.PosScreenTemplates.PosScreenTemplateFormViewModel

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Edit template form"].Value;
}

<link rel="stylesheet" href="~/lib/dropzone/css/basic.css" />
<link rel="stylesheet" href="~/lib/jquery-ui/themes/base/jquery-ui.min.css">
<link rel="stylesheet" href="~/lib/dropzone/css/dropzone.css" />
<link rel="stylesheet" href="~/css/views/posScreenTemplates/posScreenTemplateForm.css"/>

<div class="row row-eq-height wrapper border-bottom white-bg p-sm">
    <div class="col-xs-9 col-sm-10">
        <ol class="breadcrumb">
            <li class="hidden-xs">
                <a href="@Url.Action("All","PointsOfSale")">@Localizer["Home"].Value</a>
            </li>
            <li class="hidden-xs">
                <a asp-controller="PosScreenTemplates" asp-action="GetTemplates">@Localizer["Templates"]</a>
            </li>
            <li class="active">
                <strong>@ViewData["Title"]</strong>
            </li>
        </ol>
    </div>
    <div class="col-xs-3 col-sm-2">
    </div>
</div>

<div class="wrapper wrapper-content animated fadeIn" id="templateEditingForm">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins" id="dropzone-form-space">
                <form action="#" method="post" id="template-dropzone" enctype="multipart/form-data" style="height: 100%;" data-bind="dropzone: {url: urlWithId()}"></form>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins" style="margin-bottom: 15px;">
                <div class="ibox-content">
                    <div class="form-horizontal">
                        <div class="form-group form-eq-height">
                            <label class="col-sm-2 control-label">@Localizer["Name"].Value</label>
                            <div class="col-sm-10">
                                <input class="form-control m-b-xxs" data-bind="value: name"/>
                            </div>
                        </div>
                        <div class="form-group form-eq-height">
                            <label class="col-sm-2 control-label">@Localizer["Points of sale"].Value</label>
                            <div class="col-sm-10">
                                <div id="pos-list">
                                    <div style="float: left;">
                                        <!-- ko foreach: pointsOfSale() -->
                                        <span class="badge">
                                            <span data-bind="text: name"></span>
                                            <em class="fa fa-times custom-close" data-bind="click: $root.removePos"></em>
                                        </span>
                                        <!-- /ko -->
                                    </div>
                                    <div id="btn-rounded-space" class="m-l-xs" style="float: right;">
                                        <a href="#" class="btn btn-primary btn-rounded btn-xs btn-block m-t-xs" data-bind="click: $root.addPos">
                                            <em class="fa fa-plus"></em>&nbsp;<span>@Localizer["Add pos"].Value</span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered m-b-none" role="grid">
                                <caption>&nbsp;</caption>
                                <thead role="rowgroup">
                                    <tr role="row">
                                        <th role="columnheader" id="templateName" class="text-center">@Localizer["Name"].Value</th>
                                        <th role="columnheader" id="templateActions" class="text-center">@Localizer["Action"].Value</th>
                                    </tr>
                                </thead>
                                <tbody role="rowgroup">
                                    <!-- ko if: templateFiles().length > 0 -->
                                    <!-- ko foreach: paginationTemplateFilesList() -->
                                    <tr role="row">
                                        <td role="gridcell"><span data-bind="text: $data"> </span></td>
                                        <td role="gridcell">
                                            <a class="btn-link" data-bind="click: $root.open">
                                                <span><em class="fa fa-eye"></em> @Localizer["View"].Value</span>
                                            </a> <br />
                                            <a class="btn-link" data-bind="click: $root.remove">
                                                <span><em class="glyphicon glyphicon-remove"></em> @Localizer["Remove"].Value</span>
                                            </a> <br />
                                        </td>
                                    </tr>
                                    <!-- /ko -->
                                    <!-- /ko -->
                                    <!-- ko if: templateFiles().length == 0 -->
                                    <tr role="row" data-expandable="true">
                                        <td role="gridcell" class="text-center" colspan="2">
                                            @Localizer["No rows"].Value
                                        </td>
                                    </tr>
                                    <!-- /ko -->
                                </tbody>
                            </table>                            
                        </div>
                        <!-- ko if: templateFiles().length > 0 -->
                        <div class="custom-pagination">
                            <div class="custom-pagination-space">
                                <div class="col-xs-6 nopadding">
                                    <pagination params="data: templateFiles().length, page: currentPage, pageSize: pageSize, pagesCount: 5"></pagination>
                                </div>
                                <div class="col-xs-6 nopadding">
                                    <div style="float: right;">
                                        @Localizer["Show"].Value
                                        <select data-bind="value: pageSize">
                                            <option value="5">5</option>
                                            <option value="10">10</option>
                                            <option value="25">25</option>
                                        </select>
                                        @Localizer["Entries"].Value.ToLower()
                                    </div>
                                </div>
                            </div>
                        </div>
                       <!-- /ko -->
                        <div class="form-group" style="display: inline-flex;">
                            <div class="col-sm-12">
                                <button type="button"
                                        class="btn btn-default"
                                        id="cancel"
                                        onclick="window.history.back()">
                                    <em class="fa fa-remove"></em>&nbsp;@Localizer["Cancel"].Value
                                </button>
                                <button class="btn btn-primary" data-bind="click: $root.save"><em class="fa fa-save"></em>&nbsp;@Localizer["Save"].Value</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="resizable-container" style="overflow-y: auto;">
        <div id="resizable" class="hidden-xs row-flexible resizable-panels m-b-sm" data-bind="resizable: {}, style:{ height:formattedHeight(), width:formattedWidth() }">
            <div class="ibox ui-resizable" id="ibox-resizable">
                <div class="ibox-title" id="ibox-title-resizable">
                    <h5>
                        @Localizer["Preview"].Value
                    </h5>
                    <div class="ibox-tools">
                        <a class="btn-link" data-bind="click: $root.refresh">
                            <span> <em class="fa fa-refresh p-w-xs"></em></span>
                        </a>
                        <select data-bind="options: pointsOfSale(),
                                value: selectedPos,
                                optionsText: function(item) { return ko.unwrap(item.name) }"></select>
                        <select data-bind="options: screenResolutions(),
                        optionsCaption: `@Html.Raw(@Localizer["Choose"].Value)`,
                                value: selectedScreenResolution,
                                optionsAfterRender: setDisabledSelectDefault,
                                optionsText: function(item) { return ko.unwrap(item.width) + 'x' + ko.unwrap(item.height); }"></select>
                        @Localizer["Width"].Value: <label data-bind="text:formattedWidth"></label>
                        @Localizer["Height"].Value: <label data-bind="text:formattedHeight"></label>
                    </div>
                </div>
                <div class="ibox-content">
                    <iframe title="@Html.Raw(@Localizer["Content preview"].Value)" data-bind ="attr: { src: posDisplayUrl() }">
                    </iframe>
                </div>

                <div class="ui-resizable-handle ui-resizable-e climb"></div>
                <div class="ui-resizable-handle ui-resizable-s climb"></div>
                <div class="ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se climb"></div>
            </div>
        </div>
    </div>
</div>
<partial name="~/Views/Shared/Controls/_modalTextReferenceFilter.cshtml" />

@section scripts {
    <script src="~/lib/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/lib/dropzone/dropzone.js"></script>
    <script type="text/javascript">
        @{
            var serializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver()
            };
        }

        Dropzone.autoDiscover = false;

        $(document).ready(function() {
            var TemplateEditingFormViewModel = function(posScreenTemplate) {
                var self = this;

                var serviceProxy = new ServiceProxy({ contentType: "application/json" });

                ko.mapping.fromJS(posScreenTemplate, {}, self);

                ko.validation.init({
                        registerExtenders: true,
                        messagesOnModified: true,
                        insertMessages: true,
                        parseInputAttributes: true,
                        messageTemplate: null
                    },
                    true);

                self.validatedFields = ko.validatedObservable([
                    self.name.extend({
                        required: true
                    })
                ]);

                self.files = ko.observableArray([]);
                self.url = ko.observable('/api/posScreenTemplates');
                self.posId = ko.observable(0);
                self.posDisplayUrl = ko.computed(function() {
                    return `/plantDisplay/index/${self.posId()}`;
                });

                self.urlWithId = ko.computed(function() {
                    return self.url() + '/' + self.id();
                });

                self.selectedPos = ko.observable();
                self.selectedPos.subscribe((selected) => {
                    if (!selected) {
                        self.posId(0);
                        return;
                    }

                    self.posId(selected.posId());
                });

                self.heightValue = ko.observable();
                self.widthValue = ko.observable();
                self.formattedHeight = ko.computed(function() {
                    return self.heightValue() + "px";
                });
                self.formattedWidth = ko.computed(function() {
                    return self.widthValue() + "px";
                });

                self.refresh = function() {
                    var value = self.posId();
                    self.posId(null);
                    self.posId(value);
                }

                self.selectedScreenResolution = ko.observable();
                self.selectedScreenResolution.subscribe((selected) => {
                    if (!selected)
                        return;

                    self.widthValue(selected.width());
                    self.heightValue(selected.height());
                });

                self.setDisabledSelectDefault = function(option, item) {
                    ko.applyBindingsToNode(option, { disable: !item }, item);
                };

                self.pageSize = ko.observable(5);
                self.currentPage = ko.observable(1);
                self.paginationTemplateFilesList = ko.observableArray([]);

                self.page = ko.computed(function() {
                    var first = self.pageSize() * (self.currentPage() - 1);
                    var last = first + parseInt(self.pageSize());

                    self.paginationTemplateFilesList(self.templateFiles.slice(first, last));
                },
                self);

                ko.bindingHandlers.resizable = {
                    init: function(element, valueAccessor) {
                        $(element).resizable({
                            minWidth: 1024,
                            minHeight: 768,
                            maxWidth: 1980,
                            containment: "#resizable-container",
                            maxHeight: 1280,
                            stop: function(event, ui) {
                                self.heightValue(ui.size.height);
                                self.widthValue(ui.size.width);
                                self.selectedScreenResolution(null);
                            },
                            resize: function(event, ui) {
                                self.heightValue(ui.size.height);
                                self.widthValue(ui.size.width);
                            },
                            create: function(event, ui) {
                                self.heightValue($(element).height());
                                self.widthValue($(element).width());
                            }
                        });
                    }
                };

                ko.bindingHandlers.dropzone = {
                    init: function(element, valueAccessor) {
                        var value = ko.unwrap(valueAccessor());

                        var options = {
                            maxFileSize: 15,
                            uploadMultiple: false,
                            autoProcessQueue: true,
                            paramName: "files",
                            parallelUploads: 20,
                            maxFiles: 50,
                            addRemoveLinks: false,
                            dictDefaultMessage:
                                "<em class=\'fa fa-cloud-upload fa-2x\'></em><br/> <strong>@Html.Raw(Localizer["Drop files here or click to upload"].Value).</strong>",
                            init: function() {
                                this.on("success",
                                    function(file, response) {
                                        bootstrapSuccess('@Html.Raw(Localizer["Uploading"].Value)',
                                            `@Html.Raw(Localizer["File successfully uploaded"].Value): ${file.name
                                            }`);
                                        self.templateFiles.push(file.name);
                                    });
                                this.on("error",
                                    function(file, error) {
                                        bootstrapError(error);
                                    });
                                this.on("complete",
                                    function(file) {
                                        this.removeFile(file);
                                    });
                                this.on("queuecomplete", function (file) {
                                    self.refresh();
                                });
                            }
                        };

                        $.extend(options, value);

                        $(element).addClass('dropzone');

                        new Dropzone(element, options);
                    }
                };

                self.addPos = function() {
                    var callback = function(data) {
                        var posInfo = ko.mapping.fromJS(@Html.SerializeToCamel(new PosBasicInfoViewModel()));

                        var found = false;
                        for (var i = 0; i < self.pointsOfSale().length; i++) {
                            if (self.pointsOfSale()[i].posId() === data[2]) {
                                found = true;
                                break;
                            }
                        }
                        if (found)
                            return;

                        posInfo.posId(data[2]);
                        posInfo.name(data[0]);

                        self.pointsOfSale.push(posInfo);
                    };

                    showTextReference('@TextReferenceSources.PointOfSales',
                        'Витрины',
                        'simplePage',
                        false,
                        callback,
                        null,
                        '');
                }

                self.removePos = function(posInfo) {
                    self.pointsOfSale.remove(posInfo);
                }

                self.save = function() {
                    var data = ko.mapping.toJSON(self);
                    serviceProxy.putJsonResult(self.url(),
                        data,
                        function(result) {
                            if (result.error) {
                                bootstrapError(result.error);
                            } else {
                                bootstrapSuccess('@Html.Raw(Localizer["Saving"].Value)',
                                    '@Html.Raw(Localizer["Pos screen template successfully saved"].Value)');
                            }
                        });
                }

                self.remove = function(fileName) {
                    bootstrapConfirmDelete(
                        '@Html.Raw(Localizer["Attention"].Value)',
                        '@Html.Raw(Localizer["Confirming delete message"].Value)',
                        function() {
                            serviceProxy.deleteJsonResult(`${self.urlWithId()}/${fileName}`,
                                null,
                                function(result) {
                                    if (result.error) {
                                        bootstrapError(result.error);
                                    } else {
                                        bootstrapSuccess('@Html.Raw(Localizer["Removing"].Value)',
                                            `@Html.Raw(Localizer["File successfully removed"].Value): ${fileName}`);
                                        self.templateFiles.remove(fileName);
                                        self.refresh();
                                    }
                                });
                        });
                }

                self.open = function(fileName) {
                    window.open(`${self.urlWithId()}/${fileName}`, '_blank');
                }
            };

            var posScreenTemplate = @Html.Raw(JsonConvert.SerializeObject(Model, serializerSettings));
            var templateEditingViewModel = new TemplateEditingFormViewModel(posScreenTemplate);

            ko.cleanNode("templateEditingForm");
            ko.applyBindings(templateEditingViewModel, document.getElementById("templateEditingForm"));
        });
    </script>
}