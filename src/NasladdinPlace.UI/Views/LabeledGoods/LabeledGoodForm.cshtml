@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@model NasladdinPlace.UI.ViewModels.LabeledGoods.LabeledGoodFormViewModel

@{
    ViewData["Title"] = Localizer["Edit labeled good"].Value;
}
<link href="~/css/views/labeledGoods/labeledGoodForm.css" rel="stylesheet" />

<div class="row row-eq-height wrapper border-bottom white-bg p-sm">
    <div class="col-xs-8 col-sm-10" style="font-size: 14px;">
        <ol class="breadcrumb">
            <li class="hidden-xs">
                <a href="@Url.Action("All", "PointsOfSale")">@Localizer["Home"].Value</a>
            </li>
            <li class="hidden-xs">
                <a asp-controller="LabeledGoods"
                   asp-action="GetLabeledGoodsGrouppedByGood">@Localizer["Goods in point of sale"].Value</a>
            </li>
            <li class="active">
                <strong>@ViewData["Title"]</strong>
            </li>
        </ol>
    </div>
    <div class="col-xs-4 col-sm-2">

    </div>
</div>
<div class="wrapper wrapper-content animated fadeIn">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <div class="form-horizontal">
                        <form id="labeledGoodForm" data-bind="submit: submitForm">
                            <input asp-for="Id" class="hidden" />
                            <input asp-for="PosId" class="hidden" />
                            <div class="form-group form-eq-height">
                                <label class="col-sm-2 control-label">@Localizer["Label"].Value</label>
                                <div class="col-sm-10">
                                    <input asp-for="Label" class="form-control m-b-xxs" />
                                    <span asp-validation-for="Label" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group form-eq-height">
                                <label class="col-sm-2 control-label">@Localizer["Good"].Value</label>
                                <div class="col-sm-10">
                                    <select asp-for="GoodId" class="form-control m-b-xxs" asp-items="@Model.GoodSelectList">
                                        <option selected value="">@Localizer["Not selected"].Value</option>
                                    </select>
                                    <span asp-validation-for="GoodId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-2 control-label form-date-eq-height">@Localizer["Manufacture date"].Value</label>
                                <div class="col-sm-10">
                                    <div class="input-group date m-b-xxs" id="manufacture_date_picker">
                                        <input asp-for="ManufactureDate" class="form-control" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                                    <span asp-validation-for="ManufactureDate" class="text-danger"></span>
                                    <div id="manufacture_date"></div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-2 control-label form-date-eq-height">@Localizer["Expiration date"].Value</label>
                                <div class="col-sm-10 ">
                                    <div class="input-group date m-b-xxs" id="expiration_date_picker">
                                        <input asp-for="ExpirationDate" class="form-control" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                                    <span asp-validation-for="ExpirationDate" class="text-danger"></span>
                                    <div class="countdown">
                                        <span id="expiration_date"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group form-eq-height">
                                <div class="col-sm-12">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <label class="control-label p-h-xs">@Localizer["Price"].Value</label>
                                            <input asp-for="Price" placeholder="0,00" class="form-control m-b-xxs"/>
                                            <span asp-validation-for="Price" class="text-danger"></span>
                                        </div>
                                        <div class="col-sm-6">
                                            <label class="control-label p-h-xs">@Localizer["Currency"].Value</label>
                                            <select asp-for="CurrencyId" class="form-control m-b-xxs" asp-items="@Model.CurrencySelectList">
                                                <option selected value="">@Localizer["Not selected"].Value</option>
                                            </select>
                                            <span asp-validation-for="CurrencyId" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <input name="__RequestVerificationToken" type="hidden" value="CfDJ8H7iht-j7TNDrbHF6zZzlgYdC3q9R8aFTuuHDaKWHFj0VfdLqCwheJWWuAc8qWUi9iYTlywst6IpVDm9mORINN7q_4ylZKBYGNBQwrrveto987vVqLTgtK5WFyoxb8w79I-sUBHSFs6pWPIWL4J6rQCh0D5H2k0RyuUDJD6jOfi97fYOR8p8vUdL_LxiSBfIqg">
                            <div class="form-group">
                                <div class="col-sm-12">
                                    <button type="button"
                                            class="btn btn-default"
                                            id="cancel"
                                            onclick="window.history.back()">
                                        <em class="fa fa-remove"></em>&nbsp;@Localizer["Cancel"].Value
                                    </button>
                                    <button class="btn btn-primary" type="submit"><em class="fa fa-save"></em>&nbsp;@Localizer["Save"].Value</button>
                                    <button class="btn btn-warning" data-bind="click: untiedLabeledGood">
                                        <em class="fa fa-undo"></em>&nbsp;@Localizer["Untie"].Value
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <link type="text/css" rel="stylesheet" href="~/css/bootstrap-datetimepicker.min.css"/>
    <script type="text/javascript" src="~/lib/eonasdan-bootstrap-datetimepicker/src/js/bootstrap-datetimepicker.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.countdown/2.2.0/jquery.countdown.min.js"></script>
    <script type="text/javascript">
        PlantsController.init(document);

        $(document).ready(function() {
            checkLabeledGoodExpirationDate();
            checkLabeledGoodManufactureDate();

            var futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 1);

            $('#manufacture_date_picker').datetimepicker({
                locale: 'ru',
                format: 'DD/MM/YYYY HH:mm',
                useCurrent: false,
                maxDate: new Date(),
                keepInvalid: true
            }).on('dp.change',
                function() {
                    checkLabeledGoodManufactureDate();
                });;

            $('#expiration_date_picker').datetimepicker({
                locale: 'ru',
                format: 'DD/MM/YYYY HH:mm',
                useCurrent: false,
                minDate: futureDate,
                keepInvalid: true
            }).on('dp.change',
                function() {
                    checkLabeledGoodExpirationDate();
                });
        });


        function checkLabeledGoodExpirationDate() {
            var selector = $('#ExpirationDate');
            var expirationDate = $(selector).val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$3/$2/$1");

            $('#expiration_date').countdown(expirationDate, { elapse: true })
                .on('update.countdown',
                    function(event) {
                        var $this = $(this);
                        if (event.elapsed) {
                            $(selector).css('color', '#ed5565');
                            $this.html(event.strftime(
                                "<div class='alert text-danger bootoast alert-dismissable' style='opacity: 1;'>" +
                                "<span class='glyphicon glyphicon-exclamation-sign'>" +
                                "</span><span class='bootoast-alert-container'>" +
                                "<span class='bootoast-alert-content'>@($"{Localizer["Number of days from expiration date"].Value}:")" +
                                "%w @(Localizer["Weeks"].Value) %d @(Localizer["Days"].Value) %H:%M:%S.</span></span></div>"));
                        } else {
                            if (event.offset.totalDays > 0) {
                                $(selector).css('color', '#23c6c8');
                                $this.html(event.strftime(
                                    "<div class='alert text-info bootoast alert-dismissable' style='opacity: 1;'>" +
                                    "<span class='glyphicon glyphicon-ok-sign'></span><span class='bootoast-alert-container'>" +
                                    "<span class='bootoast-alert-content'>@($"{Localizer["The number of days before expiration date"].Value}: ")" +
                                    "%w @(Localizer["Weeks"].Value) %d @(Localizer["Days"].Value) %H:%M:%S.</span></span></div>"));
                            } else if (event.offset.seconds !== 0 && event.offset.totalDays === 0) {
                                $(selector).css('color', '#f8ac59');
                                $this.html(event.strftime(
                                    "<div class='alert text-warning bootoast alert-dismissable' style='opacity: 1;'>" +
                                    "<span class='glyphicon glyphicon-bullhorn'></span><span class='bootoast-alert-container'>" +
                                    "<span class='bootoast-alert-content'>@($"{Localizer["The number of days before expiration date"].Value}: ")" +
                                    "%w @(Localizer["Weeks"].Value) %d @(Localizer["Days"].Value) %H:%M:%S.</span></span></div>"));
                            }
                        }
                    });
        }

        function checkLabeledGoodManufactureDate() {
            var todayDate = moment(new Date());
            var selector = $('#ManufactureDate');

            var manufactureDate = moment(new Date($(selector).val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3")));
            var different = manufactureDate.diff(todayDate, 'hours');

            if (different > 0) {
                $(selector).css('color', '#ed5565');
                $(selector).parents(".row").find('#manufacture_date').html(
                    "<div class='alert text-danger bootoast alert-dismissable' style='opacity: 1;'>" +
                    "<span class='glyphicon glyphicon-exclamation-sign'>" +
                    "</span><span class='bootoast-alert-container'>" +
                    "<span class='bootoast-alert-content'>@(Localizer["The date of manufacture can not be in the future."].Value)" +
                    "</span></span></div>");
            } else {
                $(selector).css('color', '#23c6c8');
                $(selector).parents(".row").find('#manufacture_date').html(
                    "<div class='alert text-info bootoast alert-dismissable' style='opacity: 1;'>" +
                    "<span class='glyphicon glyphicon-ok-sign'></span><span class='bootoast-alert-container'>" +
                    "<span class='bootoast-alert-content'>@(Localizer["The date of manufacture is in the past."].Value)" +
                    "</span></span></div>");
            }
        }

        function LabeledGoodViewModel() {
            var self = this;
            var serviceProxy = new ServiceProxy();
            const url = '/api/labeledGoods';

            self.submitForm = function(formElement) {
                if ($(formElement).valid()) {
                    var formData = serializeFormToJson();
                    performSave(formData);
                } else {
                    notifyError("@Html.Raw(Localizer["Fill all fields"].Value)");
                }
            }

            self.untiedLabeledGood = function() {
                var urlWithId = `${url}/untied/${@Html.Raw(Model.Id)}`;
                serviceProxy.postJsonResult(urlWithId,
                    null,
                    function(result) {
                        if (result.error) {
                            notifyError(result);
                        } else {
                            toastr.success('@Html.Raw(Localizer["Untying"].Value)',
                                '@Html.Raw(Localizer["Success"].Value)',
                                {
                                    onHidden: function() {
                                        window.location.reload();
                                    }
                                });
                        }
                    },
                    function(result) {
                        notifyError(result);
                    });
            }

            function performSave(data) {
                serviceProxy.putJsonResult(url,
                    data,
                    function(result) {
                        if (result.error) {
                            notifyError(result);
                        } else {
                            bootstrapSuccess('@Html.Raw(Localizer["Editing"].Value)',
                                '@Html.Raw(Localizer["Labeled good information successfully updated"].Value)');
                        }
                    },
                    function(result) {
                        notifyError(result);
                    });
            };

            function serializeFormToJson() {
                var serializeFormDate = $("form").serializeArray();
                var data = {};

                serializeFormDate.forEach(function (obj) {
                    if (/^(\d*([\,]))\d{1,2}$/.test(obj.value)) {
                        data[obj.name] = parseFloat(obj.value.replace(",", ".")).toFixed(2);
                    } else {
                        data[obj.name] = obj.value;
                    }
                });

                return data;
            }

            function notifyError(result) {
                if (typeof result === 'string' || typeof value === "undefined") {
                    bootstrapError(result);
                } else if (Array.isArray(result.responseJSON.errors)) {
                    result.responseJSON.errors.forEach(function(error) {
                        bootstrapError(error);
                    });
                } else {
                    bootstrapError(result.responseJSON.error);
                }
            }
        }

        var labeledGoodViewModel = new LabeledGoodViewModel();
        ko.applyBindings(labeledGoodViewModel);
    </script>
}