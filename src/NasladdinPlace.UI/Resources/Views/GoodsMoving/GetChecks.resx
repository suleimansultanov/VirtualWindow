<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Apply" xml:space="preserve">
    <value>Применить</value>
  </data>
  <data name="Artical" xml:space="preserve">
    <value>Артикул</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Описание</value>
  </data>
  <data name="Goods" xml:space="preserve">
    <value>Товары</value>
  </data>
  <data name="LabeledGoods" xml:space="preserve">
    <value>Купленные товары</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Наименование</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Следующая</value>
  </data>
  <data name="Object" xml:space="preserve">
    <value>Объект</value>
  </data>
  <data name="Operations" xml:space="preserve">
    <value>Операции</value>
  </data>
  <data name="Operations quantity" xml:space="preserve">
    <value>Операций</value>
  </data>
  <data name="Phone number" xml:space="preserve">
    <value>Телефон</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Предыдущая</value>
  </data>
  <data name="Purchase amount" xml:space="preserve">
    <value>Сумма</value>
  </data>
  <data name="Purchase date" xml:space="preserve">
    <value>Дата покупки</value>
  </data>
  <data name="Purchase quantity" xml:space="preserve">
    <value>Куплено</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>Время</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Пользователи</value>
  </data>
  <data name="Balance" xml:space="preserve">
    <value>Баланс</value>
  </data>
  <data name="PutGoods" xml:space="preserve">
    <value>Загрузка</value>
  </data>
  <data name="TakenGoods" xml:space="preserve">
    <value>Выгрузка</value>
  </data>
  <data name="BoughtGoods" xml:space="preserve">
    <value>Покупка</value>
  </data>
  <data name="Operation is not completed" xml:space="preserve">
    <value>Операция не завершена</value>
  </data>
  <data name="Operation type" xml:space="preserve">
    <value>Тип операции</value>
  </data>
  <data name="Bought quantity" xml:space="preserve">
    <value>Куплено</value>
  </data>
  <data name="Put quantity" xml:space="preserve">
    <value>Положено</value>
  </data>
  <data name="Taken quantity" xml:space="preserve">
    <value>Взято</value>
  </data>
  <data name="Not selected" xml:space="preserve">
    <value>Не выбрано</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Действие</value>
  </data>
  <data name="Refund" xml:space="preserve">
    <value>Возврат</value>
  </data>
  <data name="Refund payment" xml:space="preserve">
    <value>Возвратить</value>
  </data>
  <data name="Refunded" xml:space="preserve">
    <value>Возвращено</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>От</value>
  </data>
  <data name="Until" xml:space="preserve">
    <value>До</value>
  </data>
  <data name="Points of sale" xml:space="preserve">
    <value>Витрины</value>
  </data>
  <data name="User name" xml:space="preserve">
    <value>Имя пользователя</value>
  </data>
  <data name="Checks" xml:space="preserve">
    <value>Чеки</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Цена</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Добавить</value>
  </data>
  <data name="Bonus" xml:space="preserve">
    <value>Бонус</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Завершена</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Удалено</value>
  </data>
  <data name="NoAction" xml:space="preserve">
    <value>Без изменений</value>
  </data>
  <data name="Opened" xml:space="preserve">
    <value>Открыта</value>
  </data>
  <data name="Paid" xml:space="preserve">
    <value>Оплачена</value>
  </data>
  <data name="PendingCompletion" xml:space="preserve">
    <value>Ожидает завершения</value>
  </data>
  <data name="PendingPayment" xml:space="preserve">
    <value>Ожидает оплаты</value>
  </data>
  <data name="Status operation" xml:space="preserve">
    <value>Статус операции</value>
  </data>
  <data name="Actual payment amount" xml:space="preserve">
    <value>Сумма к оплате</value>
  </data>
  <data name="All points of sale" xml:space="preserve">
    <value>Все витрины</value>
  </data>
  <data name="Point of sale" xml:space="preserve">
    <value>Витрина</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Поиск </value>
  </data>
  <data name="User" xml:space="preserve">
    <value>Пользователь</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Домой</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Идентификатор</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Редактировать</value>
  </data>
</root>